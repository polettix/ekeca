#!/bin/sh
#C  Copyright 2020 Flavio Poletti
#C
#C  Licensed under the Apache License, Version 2.0 (the "License");
#C  you may not use this file except in compliance with the License.
#C  You may obtain a copy of the License at
#C
#C      http://www.apache.org/licenses/LICENSE-2.0
#C
#C  Unless required by applicable law or agreed to in writing, software
#C  distributed under the License is distributed on an "AS IS" BASIS,
#C  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#C  See the License for the specific language governing permissions and
#C  limitations under the License.

_type_of() { sed -n '/^-*BEGIN/{s/-*BEGIN *//;s/--*//;p;q}' "$1"; }

cmd_check_association() {
#H - check_association <key> <certificate>
#H       check that a (private) key corresponds to the public key in the
#H       certificate.
   local has_private private has_public public file
   for file in "$1" "$2" ; do
      local type="$(_type_of "$file")"
      case "$type" in
         (CERTIFICATE)
            public="$(openssl x509 -noout -modulus -in "$file")"
            has_public=1
            ;;
         (PRIVATE\ KEY)
            private="$(openssl rsa -noout -modulus -in "$file")"
            has_private=1
            ;;
         (*)
            printf >&2 '%s\n' "unhandled type '$type'"
            return 1
            ;;
      esac
   done
   if [ -z "${has_private:-""}" ] ; then
      printf >&2 'no private key found\n'
      return 1
   fi
   if [ -z "${has_public-""}" ] ; then
      printf >&2 'no public key found\n'
      return 1
   fi
   if [ "$private" != "$public" ] ; then
      printf >&2 'MISMATCH private<%s>\n          public<%s>\n' "$private" "$public"
      return 1
   fi
   printf >&2 'keys match\n'
   return 0
}

cmd_boot() {
#H - boot
#H       clean Root and Intermediate CAs if present, then regenerate them
#H
   cmd_clean
   cmd_rca_create
   cmd_ica_create
}

cmd_clean() {
#H - clean
#H       clean Root and Intermediate CAs (if present)
#H
   _cmd_clean_ca rca
   _cmd_clean_ca ica
}

_cmd_clean_ca() { rm -rf "$1"; }

#H - client_create [<common-name> [<alt-name> [...]]]
#H       create a client certificate. Pass a `common-name` or accept
#H       the default `client.example.com`. You can also pass alternative
#H       names to be set in the certificate as allowed aliases.
#H
cmd_client_create() {
   local cli="${1:-"client.example.com"}"
   local alt="DNS:$cli"
   [ $# -eq 0 ] || shift
   while [ $# -gt 0 ] ; do
      alt="$alt, DNS:$1"
      shift
   done

   mkdir -p "$cli"
   cat >"$cli"/openssl.cnf <<END
[ req ]
default_bits		     = 2048
prompt                 = no
distinguished_name     = distinguished_name
req_extensions         = req_extensions

[ distinguished_name ]
commonName             = "$cli"
countryName            = IT
stateOrProvinceName    = RM
localityName           = Roma
organizationName       = Everish
organizationalUnitName = Client

[ req_extensions ]
subjectAltName         = $alt
END

   cat >"$cli"/renew.sh <<'END'
#!/bin/sh

my_directory="$(dirname "$(readlink -f "$0")")"
my_directory_name="$(basename "$my_directory")"
my_directory_parent="$(dirname "$my_directory")"

cd "$my_directory_parent"
ekeca client_renew "$my_directory_name"
END
   chmod +x "$cli"/renew.sh

   cmd_client_renew "$cli"
}

#H - client_renew <dirname>
#H       renew a client certificate. File in `dirname/openssl.cnf` is used
#H       as the input configuration for generating the certificate request.
#H       The certificate is signed/generated by the Intermediate CA.
#H       **NOTE** The client private key will be re-generated.
#H
cmd_client_renew() {
   local cli="$1"
   openssl req -new -config "$cli"/openssl.cnf \
      -days "${DAYS:-42}" -out "$cli"/certificate-request.pem \
      -newkey "${NEWKEY:-"rsa:2048"}" -nodes -keyout "$cli"/key.pem
   cmd_ica_sign_client "$cli"/certificate-request.pem "$cli"/certificate.pem
   cat "$cli"/certificate.pem ica/certificate.pem \
      > "$cli"/certificates-chain.pem
}

cmd_help() {
#H - help
#H       print this help message
#H
   printf '%s <subcommand> [<arg> [<arg> [...]]]\n' "$0"
   printf '\nAvailable subcommands:\n\n'
   sed -ne 's/^#H \?//p' "$0"
}

########################################################################

#H - ica_create
#H       create the Intermediate CA
#H
cmd_ica_create() {
   _cmd_init_ca ica
   cat >ica/openssl.cnf <<'END'
[ ca ]
default_ca             = default_ca

[ default_ca ]
dir                    = ica
private_key            = $dir/key.pem
certificate            = $dir/certificate.pem
database               = $dir/database
serial                 = $dir/serial
RANDFILE               = $dir/RANDFILE
new_certs_dir          = $dir/certificates
default_days           = 42
default_md             = sha256
copy_extensions        = copy
policy                 = policy
prompt                 = no

[ policy ]
countryName             = supplied
stateOrProvinceName     = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
default_bits		     = 2048
prompt                 = no
distinguished_name     = distinguished_name

[ distinguished_name ]
commonName             = Everish Intermediate CA
countryName            = IT
stateOrProvinceName    = RM
localityName           = Roma
organizationName       = Everish
organizationalUnitName = Intermediate
emailAddress           = intermediate.everish@example.com

[ server_extensions ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer:always
basicConstraints       = CA:false
keyUsage               = critical,digitalSignature,keyEncipherment
extendedKeyUsage       = serverAuth

[ client_extensions ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer:always
basicConstraints       = CA:false
keyUsage               = critical,digitalSignature
extendedKeyUsage       = clientAuth
END
   openssl req -new -config ica/openssl.cnf \
      -days "${DAYS:-42}" -out ica/certificate-request.pem \
      -newkey "${NEWKEY:-"rsa:2048"}" -nodes -keyout ica/key.pem
   cmd_rca_sign ica/certificate-request.pem ica/certificate.pem
}

#H - ica_reset
#H       reset the Intermediate CA (delete and re-create)
#H
cmd_ica_reset() { _cmd_reset_ca ica; }

#H - ica_sign <certificate-request> [<certificate>]
#H       same as cmd_ica_sign_server, for historical reasons
#H
cmd_ica_sign() {
   cmd_ica_sign_server "$@"
}

#H - ica_server_sign <certificate-request> [<certificate>]
#H       sign a `certificate-request`for a server, creating the
#H       corresponding `certificate`. The name of the certificate will be
#H       generated automatically if missing.
#H       This is signing by the Intermediate CA, so it is intended for
#H       signing Client or Server certificate requests.
#H
cmd_ica_sign_server() {
   local csr="$1"
   local crt="${2:-"${csr%.csr}.crt"}"
   openssl ca -batch -config ica/openssl.cnf -extensions server_extensions \
      -notext -in "$csr" -out "$crt"
}

#H - ica_client_sign <certificate-request> [<certificate>]
#H       sign a `certificate-request` for a client, creating the
#H       corresponding `certificate`. The name of the certificate will be
#H       generated automatically if missing.
#H       This is signing by the Intermediate CA, so it is intended for
#H       signing Client or Server certificate requests.
#H
cmd_ica_sign_client() {
   local csr="$1"
   local crt="${2:-"${csr%.csr}.crt"}"
   openssl ca -batch -config ica/openssl.cnf -extensions client_extensions \
      -notext -in "$csr" -out "$crt"
}

########################################################################

_cmd_init_ca() {
   local ca="$1"
   mkdir -p "$ca/certificates"
   touch "$ca"/database
   [ -e "$ca/database.attr" ] \
      || printf 'unique_subject = no\n' > "$ca"/database.attr
   [ -e "$ca/serial" ] || printf '1000\n' > "$ca"/serial
}

#H - print <pem-file>
#H       print a text dump of an input file. It currently supports printing
#H       certificates, certificate requests and private keys, which is
#H       also what ekeca is about.
#H
cmd_print() {
   local input="$1"
   local type="$(_type_of "$input")"
   local cmd
   case "$type" in
      (CERTIFICATE)
         cmd=x509
         ;;
      (CERTIFICATE\ REQUEST)
         cmd=req
         ;;
      (PRIVATE\ KEY)
         cmd=rsa
         ;;
      (*)
         printf >&2 '%s\n' "unhandled type '$type'"
         return 1
         ;;
   esac
   openssl "$cmd" -noout -text -in "$input"
}

########################################################################

cmd_rca_create() {
#H - rca_create
#H       create the Root CA
#H
   _cmd_init_ca rca
   cat >rca/openssl.cnf <<'END'
[ ca ]
default_ca             = default_ca

[ default_ca ]
dir                    = rca
private_key            = $dir/key.pem
certificate            = $dir/certificate.pem
database               = $dir/database
serial                 = $dir/serial
RANDFILE               = $dir/RANDFILE
new_certs_dir          = $dir/certificates
default_days           = 42
default_md             = sha256
copy_extensions        = copy
policy                 = policy
prompt                 = no

[ policy ]
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
default_bits		     = 2048
prompt                 = no
distinguished_name     = distinguished_name
x509_extensions        = ca_extensions

[ distinguished_name ]
commonName             = Everish Root CA
countryName            = IT
stateOrProvinceName    = RM
localityName           = Roma
organizationName       = Everish
organizationalUnitName = Root
emailAddress           = root.everish@example.com

[ ca_extensions ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer:always
basicConstraints       = critical,CA:true
keyUsage               = critical,digitalSignature,cRLSign,keyCertSign
END
   openssl req -new -x509 -config rca/openssl.cnf \
      -days "${DAYS:-42}" -out rca/certificate.pem \
      -newkey "${NEWKEY:-"rsa:2048"}" -nodes -keyout rca/key.pem
}

#H - rca_reset
#H       reset the Root CA (delete and re-create)
#H
cmd_rca_reset() { _cmd_reset_ca rca; }

#H - rca_sign <certificate-request> [<certificate>]
#H       sign a `certificate-request`, creating the corresponding
#H       `certificate`. The name of the certificate will be generated
#H       automatically if missing.
#H       This is signing by the Root CA, so it is intended for signing
#H       Intermediate CA certificate requests.
#H
cmd_rca_sign() {
   local csr="$1"
   local crt="${2:-"${csr%.csr}.crt"}"
   openssl ca -batch -config rca/openssl.cnf -extensions ca_extensions \
      -notext -in "$csr" -out "$crt"
}

_cmd_reset_ca() {
   _cmd_clean_ca "$1"
   cmd_"$1"_create
}

#H - server_create [<common-name> [<alt-name> [...]]]
#H       create a server certificate. Pass a `common-name` or accept
#H       the default `srv.example.com`. You can also pass alternative
#H       names to be set in the certificate as allowed aliases.
#H
cmd_server_create() {
   local srv="${1:-"srv.example.com"}"
   local alt="DNS:$srv"
   [ $# -eq 0 ] || shift
   while [ $# -gt 0 ] ; do
      alt="$alt, DNS:$1"
      shift
   done

   mkdir -p "$srv"
   cat >"$srv"/openssl.cnf <<END
[ req ]
default_bits		     = 2048
prompt                 = no
distinguished_name     = distinguished_name
req_extensions         = req_extensions

[ distinguished_name ]
commonName             = "$srv"
countryName            = IT
stateOrProvinceName    = RM
localityName           = Roma
organizationName       = Everish
organizationalUnitName = Server

[ req_extensions ]
subjectAltName         = $alt
END

   cat >"$srv"/renew.sh <<'END'
#!/bin/sh

my_directory="$(dirname "$(readlink -f "$0")")"
my_directory_name="$(basename "$my_directory")"
my_directory_parent="$(dirname "$my_directory")"

cd "$my_directory_parent"
ekeca server_renew "$my_directory_name"
END
   chmod +x "$srv"/renew.sh

   cmd_server_renew "$srv"
}

#H - server_renew <dirname>
#H       renew a server certificate. File in `dirname/openssl.cnf` is used
#H       as the input configuration for generating the certificate request.
#H       The certificate is signed/generated by the Intermediate CA.
#H       **NOTE** The server private key will be re-generated.
#H
cmd_server_renew() {
   local srv="$1"
   openssl req -new -config "$srv"/openssl.cnf \
      -days "${DAYS:-42}" -out "$srv"/certificate-request.pem \
      -newkey "${NEWKEY:-"rsa:2048"}" -nodes -keyout "$srv"/key.pem
   cmd_ica_sign_server "$srv"/certificate-request.pem "$srv"/certificate.pem
   cat "$srv"/certificate.pem ica/certificate.pem \
      > "$srv"/certificates-chain.pem
}

main() {
   local cmd="${1-"help"}"
   [ $# -eq 0 ] || shift
   "cmd_$cmd" "$@"
}

main "$@"
